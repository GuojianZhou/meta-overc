From 42c69bb787a8aab540470808d595c724ca928c4d Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Sun, 3 Jul 2016 07:44:32 -0500
Subject: [PATCH] Add -nocheckpid option

Do not check the client attacher process ids. This is an advanced option
which in general should not be used unless you are using multiple
process id name spaces and interconnecting sessions with a shared socket
directory.  Remote "live" sessions in a different name space will have to
be manually killed after a detach.

The intended purpose of this option is to allow a container to spawn
a remote screen command via a socket which is shared from another
context.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

diff --git a/attacher.c b/attacher.c
index 1052549cbd57..2636ebf5579b 100644
--- a/attacher.c
+++ b/attacher.c
@@ -59,6 +59,7 @@ extern char HostName[];
 extern struct passwd *ppp;
 extern char *attach_tty, *attach_term, *LoginName, *preselect;
 extern int xflag, dflag, rflag, quietflag, adaptflag;
+extern int nopidcheckflag;
 extern struct mode attach_Mode;
 extern struct NewWindow nwin_options;
 extern int MasterPid, attach_fd;
@@ -307,11 +308,14 @@ int how;
 
   debug2("Attach: uid %d euid %d\n", (int)getuid(), (int)geteuid());
   MasterPid = 0;
-  for (s = SockName; *s; s++)
+  if (!nopidcheckflag) 
     {
-      if (*s > '9' || *s < '0')
-	break;
-      MasterPid = 10 * MasterPid + (*s - '0');
+      for (s = SockName; *s; s++)
+        {
+	  if (*s > '9' || *s < '0')
+	    break;
+	  MasterPid = 10 * MasterPid + (*s - '0');
+	}
     }
   debug1("Attach decided, it is '%s'\n", SockPath);
   debug1("Attach found MasterPid == %d\n", MasterPid);
@@ -459,7 +463,8 @@ static sigret_t
 AttacherSigInt SIGDEFARG
 {
   signal(SIGINT, AttacherSigInt);
-  Kill(MasterPid, SIGINT);
+  if (MasterPid)
+    Kill(MasterPid, SIGINT);
   SIGRETURN;
 }
 
@@ -627,7 +632,7 @@ Attacher()
       alarm(15);
       pause();
       alarm(0);
-      if (kill(MasterPid, 0) < 0 && errno != EPERM)
+      if (MasterPid && kill(MasterPid, 0) < 0 && errno != EPERM)
         {
 	  debug1("attacher: Panic! MasterPid %d does not exist.\n", MasterPid);
 	  AttacherPanic++;
diff --git a/doc/screen.1 b/doc/screen.1
index d3aab704d9b5..bdcdc895f33e 100644
--- a/doc/screen.1
+++ b/doc/screen.1
@@ -299,6 +299,13 @@ Do not terminate the screen session when the final window is closed.  The
 quit command must be used from with in the screen session to terminate
 the screen session.
 .TP 5
+.BI \-nopidcheck
+Do not check the client attacher process ids. This is an advanced option
+which in general should not be used unless you are using multiple
+process id name spaces and interconnecting sessions with a shared socket
+directory.  Remote "live" sessions in a different name space will have to
+be manually killed after a detach.
+.TP 5
 .BI "\-p " number_or_name|-|=|+
 Preselect a window. This is useful when you want to reattach to a
 specific window or you want to send a command via the \*Q-X\*U
diff --git a/help.c b/help.c
index fa95a4ae697a..092d98eaf2d6 100644
--- a/help.c
+++ b/help.c
@@ -88,6 +88,7 @@ void exit_with_usage(char *myname, char *message, char *arg)
   printf("-Logfile file Set logfile name.\n");
   printf("-m            ignore $STY variable, do create a new screen session.\n");
   printf("-noexit       Do not exit when the last screen window terminates.\n");
+  printf("-nopidcheck   Do not validate attacher process ids.\n");
   printf("-O            Choose optimal output rather than exact vt100 emulation.\n");
   printf("-p window     Preselect the named window if it exists.\n");
   printf("-q            Quiet startup. Exits with non-zero return code if unsuccessful.\n");
diff --git a/screen.c b/screen.c
index 5553bf85f2ec..3b17d2395237 100644
--- a/screen.c
+++ b/screen.c
@@ -213,6 +213,7 @@ char *wlisttit;
 int auto_detach = 1;
 int iflag, rflag, dflag, lsflag, quietflag, wipeflag, xflag;
 int noexitflag;
+int nopidcheckflag;
 int cmdflag;
 int queryflag = -1;
 int adaptflag;
@@ -697,9 +698,18 @@ int main(int ac, char** av)
             mflag = 1;
             break;
           case 'n':
-            if (strcmp(ap+1, "oexit"))
-              exit_with_usage(myname, "Unknown option %s", --ap);
-            noexitflag = 1;
+            if (!strcmp(ap+1, "oexit"))
+              {
+                noexitflag = 1;
+              }
+            else if (!strcmp(ap+1, "opidcheck"))
+              {
+                nopidcheckflag = 1;
+              }
+            else
+              {
+                exit_with_usage(myname, "Unknown option %s", --ap);
+              }
             ap = NULL;
             break;
 
diff --git a/socket.c b/socket.c
index e464a62388c6..bad332c5062f 100644
--- a/socket.c
+++ b/socket.c
@@ -76,6 +76,7 @@ static void  AskPassword __P((struct msg *));
 extern char *RcFileName, *extra_incap, *extra_outcap;
 extern int ServerSocket, real_uid, real_gid, eff_uid, eff_gid;
 extern int dflag, iflag, rflag, lsflag, quietflag, wipeflag, xflag;
+extern int nopidcheckflag;
 extern int queryflag;
 extern char *attach_tty, *LoginName, HostName[];
 extern struct display *display, *displays;
@@ -862,7 +863,7 @@ struct win *wi;
 	return -1;
     }
 
-  if (CheckPid(pid))
+  if (!nopidcheckflag && CheckPid(pid))
     {
       Msg(0, "Attach attempt with bad pid(%d)!", pid);
       return -1;
-- 
2.11.0.rc2

