#/bin/bash

# we ge an action + cube name or action + json
action=$1
shift

# if we have json, there will be { in the next input, otherwise, it
# is a directory
echo "$@" | grep -q {
if [ $? -eq 0 ]; then
    # json
    cubedir=$(pwd)
    cubename=$(basename $cubedir)

    # yank what we need out of the json
    pid=$(echo "$@" | jq .pid)
    veth_essential_name=$(eval echo veth${pid})
    # oci containers always get veth-br-int as their internal veth pair name
    veth_name="veth-br-int"
else
    # directory
    cubedir=$1
    cubename=$(basename $cubedir)
    count=0
    while [ $count -lt 10 ]; do
	pid=$(machinectl show ${cubename} | grep Leader | cut -f2 -d=)
	if [ -z "${pid}" ]; then
	    echo "failed to get pid $count" >> /tmp/cube-hook.log
	    let count=$count+1
	    sleep 0.5
	else
	    echo "got pid $pid on try $count" >> /tmp/cube-hook.log
	    count=10
	fi
    done
    veth_name=$(eval echo veth-${cubename})
fi

cd $cubedir

if [ "${action}" = "netprime" ]; then
    echo "[INFO]: netprime setup"

    netdevs=$(cat .cube.device.network)
    for n in ${netdevs}; do
	echo ${n} | grep -q veth
	if [ $? -ne 0 ]; then
	    # we have a real device
	    device=$(echo ${n} | cut -f1 -d:)

	    # forwarding (for other containers to the external network)
	    nsenter -t ${pid} -n --preserve-credentials iptables -t nat -A POSTROUTING -o ${device} -j MASQUERADE
	    nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'

	    # Up the interface via dhclient, since not all netprime
	    # containers are capable of doing this themselves
	    command="dhclient -sf /usr/sbin/dhclient-script.container -e CONTAINER=${cubename} --no-pid ${device} >> /dev/null 2>&1"
	    eval nsenter -t ${pid} -n -- ${command}
	    if [ -e "/etc/resolv.conf.${cubename}" ]; then

	        # mv /etc/resolv.conf.${cubename} /opt/container/${cubename}/rootfs/etc/resolv.conf

		# the VRF (currently dom0) routes our DNS traffic, so we need to get
		# this captured config into it's dnsmasq.conf

		echo "no-resolv" >> /opt/container/dom0/rootfs/etc/dnsmasq.conf
		sed '/search.*/d' -i /etc/resolv.conf.${cubename}
		sed 's/nameserver /server=/g' -i /etc/resolv.conf.${cubename}
		cat /etc/resolv.conf.${cubename} >> /opt/container/dom0/rootfs/etc/dnsmasq.conf

		# These may need to be refined, but they nat and forward and DNS
		# traffic from the netprime (.1) to the VRF (currently dom0 @ .3)
		# TODO: the IPs could be variables

		# check to make sure we aren't both .3 and .1 .. since we don't need any
		# port forwards in that case
		forward_dns_to_dom0=t
		if [ -f "cube.network.ip" ]; then
		    for ip in $(cat cube.network.ip); do
			ip_no_mask=${ip%/*}
			if [ "${ip_no_mask}" == "192.168.42.3" ]; then
			    forward_dns_to_dom0=
			fi
		    done
		fi

		if [ -n "${forward_dns_to_dom0}" ]; then
		    nsenter -t ${pid} -n --preserve-credentials -- iptables -t nat -A PREROUTING  -d 192.168.42.1 -p tcp -m tcp --dport 53 -j DNAT --to-destination 192.168.42.3:53
		    nsenter -t ${pid} -n --preserve-credentials -- iptables -t nat -A PREROUTING  -d 192.168.42.1 -p udp -m udp --dport 53 -j DNAT --to-destination 192.168.42.3:53
		    nsenter -t ${pid} -n --preserve-credentials -- iptables -t nat -I POSTROUTING -d 192.168.42.0/24 -j MASQUERADE
		fi

		# Enter dom0 and restart dnsmasq
		dom0_pid=$(cat /opt/container/dom0/.cube.pid)
		nsenter -t ${dom0_pid} -m -n -u -i -p -C --preserve-credentials -- systemctl restart dnsmasq
	    fi
	
	    # We need to track the pids of dhclient so it can be killed later if the
	    # container dies. Since dhclient isn't in that pid namespace, it will live
	    # on and keep the network device from returning to the root namespace
	    rm -f /opt/container/${cubename}/.netns.pids
	    for i in $(pidof dhclient); do
		ns=$(ip netns identify $i)
		if [ "${ns}" == "${cubename}" ]; then
		    echo $i >> /opt/container/${cubename}/.netns.pids
		fi
	    done
	fi
    done
fi

if [ "${action}" = "vrf" ]; then
    echo "[INFO]: VRF setup"

    nsenter -t ${pid} -m grep -q ${veth_name} /etc/dnsmasq.conf
    if [ $? -ne 0 ]; then
	# dnsmasq setup
	nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials sh -c "echo \"interface=${veth_name}\" >> /etc/dnsmasq.conf"
	nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials sh -c 'echo "dhcp-range=192.168.42.100,192.168.42.200,2h" >> /etc/dnsmasq.conf'
	nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials sh -c 'echo "dhcp-option=option:router,192.168.42.1" >> /etc/dnsmasq.conf'
	nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials systemctl restart dnsmasq
	if [ $? -ne 0 ]; then
	    exit 0
	fi
    fi
fi
