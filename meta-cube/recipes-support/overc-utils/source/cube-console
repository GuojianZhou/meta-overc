#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

usage()
{
cat << EOF

  cube-console [--ns] [--notraps] [-v] <console name>

  console name: a valid console name.

                If "list" is passed, available consoles are displayed.

  --ns: enter a namespace shell. Only available from privileged control
        domains.

  --notraps: do not monitor for an exit sequence. If this option is not
             specified.  'ctrl-\': force exits the shell immediately (no clean logout).

  -v: print the console exit return value.
  
  example:

      $ cube-console list    
      $ cube-console cube-essential
      $ cube-console dom0
      $ cube-console -v dom0
      $ cube-console --notraps dom0
      $ cube-console --ns dom0
 
EOF
}

if [ -z "$1" ]; then
    usage
    exit
fi

while [ $# -gt 0 ]; do
    case "$1" in
	-v) verbose=t
            ;;
	--force) force=t
            ;;
	--notraps) notraps=t
            ;;
	--ns) namespace=t
            ;;
	-h|--help|?)
	    usage
	    exit
	    ;;
        *) break
            ;;
    esac
    shift
done

if [ -d "/host/proc" ]; then
    we_are_dom0=t
fi

generate_console_name() {
    local max=${1} # max number we'll generate
    local dir=${2} # directory to check for existing files
    local prefix=${3} # optional

    local number=$RANDOM

    let "number %= ${max}"
    console_name="console-$prefix-$number"
    while [ -e ${dir}/${console_name} ]; do
        number=$RANDOM
        let "number %= ${max}"
        console_name="console-$prefix-$number"
    done

    echo ${console_name}
}

function exec_console()
{
    local file

    file=`wait_for_files 0.1 100 /var/lib/cube/local/cmd-output /var/lib/cube/local/cmd-error`
    if [ -z "${file}" ]; then
	echo "[ERROR]: No console is available, and no error reported"
	exit 2
    fi
    if [ "${file}" = "/var/lib/cube/local/cmd-error" ]; then
	/usr/bin/dtach -a ${file} -q -C -z -r none
	exit 1
    fi
    if [ "${file}" = "/var/lib/cube/local/cmd-output" ]; then
	console_device=`/usr/bin/dtach -a ${file} -q -C -z -r none`
    fi
    connect_console

}

function connect_console()
{
    file=`wait_for_files 0.1 100 /var/lib/cube/local/${console_device}`
    if [ -z "${file}" ]; then
	echo "[ERROR]: No console is available, and no error reported"
	exit 2
    fi

    if [ -z "${notraps}" ]; then
	echo "Escape character is '^\\'."
    else
	escape="-E"
    fi

    /usr/bin/dtach -a /var/lib/cube/local/${console_device} $escape -q -C -z -r none
    ret=$?
    if [ -n "${verbose}" ]; then
	echo "console connection exited with: $ret"
    fi
}

# returns 1 if we are container, 0 otherwise
function am_i_a_container()
{
    local virt=`systemd-detect-virt`
    if [ "${virt}" = "lxc" ]; then
	return 1
    fi

    return 0
}

function wait_for_files()
{
    local wait_increment=${1:-1} # 1 is the default
    shift
    local wait_count=${1:-200} # 200 is the default
    shift
    local files=$@ # files to wait for

    while [ ${wait_count} -gt 0 ]; do
	for f in ${files}; do
	    ls -alF ${f} > /dev/null 2>&1
	    if [ -e "${f}" ]; then
		echo "${f}"
		return 0
	    fi
	done
	sleep ${wait_increment}
	wait_count=$((wait_count - 1))
    done

    return 1
}

# essential is only available from dom0, so we need extra checks
function do_essential_console()
{
    if [ ! -d "/host/proc" ]; then
	echo "ERROR: essential console can only be entered via dom0"
	exit 1
    fi

    if [ ! -d "/essential" ]; then
	echo "ERROR: essential filesystem is not available on /essential"
	exit 1
    fi

    if [ -n "${we_are_dom0}" ]; then
	console_device=`generate_console_name 200 /var/lib/cube/${target}/`
	cmd="/sbin/agetty -J -"
	local nsargs=""
	if [ -e /proc/1/ns/cgroup ] ; then
	    nsargs=-C
	fi
	nsenter -P -t 1 -p -n -i -u -m $nsargs /usr/bin/dtach -n /var/lib/cube/dom0/${console_device} -r none -w -W 5 -Q ${cmd}
	connect_console
	return
    else
	echo "ERROR: essential console can only spawn from dom0"
	exit 1
    fi
}


function do_console()
{
    local target=$1
    local type=$2 # namspace or login

    if [ -n "${we_are_dom0}" ]; then
	console_device=`generate_console_name 200 /var/lib/cube/${target}/`
	cmd="lxc-attach -n ${target} -- /sbin/agetty -J -"
	local nsargs=""
	if [ -e /proc/1/ns/cgroup ] ; then
	    nsargs=-C
	fi
	nsenter -P -t 1 -p -n -i -u -m $nsargs /usr/bin/dtach -n /var/lib/cube/dom0/${console_device} -r none -w -W 5 -Q ${cmd}
	connect_console
	return
    fi

    if [ ! -e "/var/lib/cube/local/cmd-pipe" ]; then
	echo "[ERROR]: /var/lib/cube/local/cmd-pipe not found, cannot create console"
	exit 1
    fi

    if [ -z "${type}" ]; then
	type=login
    fi

    [ -n "$verbose" ] && debug="-v "

    if [ -n "${namespace}" ]; then
        (echo "nsenter ${target}" | nanoclient -q $debug -R ipc:///var/lib/cube/local/cmd-pipe) &
    else
	(echo "console ${target}" | nanoclient -q $debug -R ipc:///var/lib/cube/local/cmd-pipe) &
    fi

    exec_console
}

# Parms: $1: target container/console
function enter_console
{
    local consolename=$1

    case $consolename in
        list)
	    if [ -n "${we_are_dom0}" ]; then
		x=`cube-cmd lxc-ls`
		x="essential $x"
	    else
		x="dom0"
	    fi
	    echo "$x"
	    ;;
	*essential*)
	    if [ -n "${we_are_dom0}" ]; then
		do_essential_console
	    else
		echo "ERROR: essential console is only available to dom0"
		exit 1
	    fi
	    ;;
	*dom0*)
	    do_console dom0 login
	    ;;
	*)
	    if [ -n "${we_are_dom0}" ] || [ -n "${force}" ]; then
		do_console ${consolename} login
	    else
		echo "ERROR: only connections to dom0 are supported from non-system containers"
		exit 1
	    fi
	    ;;
    esac
}

am_i_a_container
if [ $? -eq 0 ]; then
    echo "ERROR: host detected, cube-console only works in a monitored container."
    echo "       Commands must be directly invoked in essential, control functions"
    echo "       via the control domain."
    exit 1
fi

enter_console $1
